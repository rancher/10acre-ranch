#!/bin/bash
#set -o xtrace
set -e

if [ $(whoami) == "root" ]; then
    echo "Do not run as root!" 1>&2
    exit 1
fi

: ${GCE_PROJECT:="rancher-dev"}

gcloud -v >/dev/null 2>&1 || {
    echo "gcloud command not found." 1>&2
    exit 1
}

print_help()
{
    cat 1>&2 <<EOF
gce-10acre-ranch Usage:
    gce-10acre-ranch [opts]
    -a - Agent Container:
            needs full container repo/name[:tag]
    -b - Boot disk size in GB (40 default)
    -c - Cluster name[Required]
    -d - DELETE ALL NODES
    -e - External IP for master...(yes this is getting ridiculous)
    -f - Boot disk type (pd-standard default)
    -h - Print this message
    -i - Show the IP address of the master
    -l - List nodes or clusters if no -c is passed
    -m - Master Machine type (g1-small default)
    -M - Node Machine type (g1-small default)
    -n - Number of nodes [defaults to 1]
    -N - Network [default is default]
    -o - OS image
           centos-6 (Servers only. Configuration is manual)
           centos-7 (Servers only. Configuration is manual)
           rhel-6 (Servers only. Config is manual)
           rhel-7 (Servers only. Config is manual)
           coreos-<version>
           coreos (stable)
           debian-7-backports
           fedora-21 (Rancher Labs Only)
           ubuntu-<version>
    -p - privileged (needed for fedora)
        - server
        - agent
        - all
    -q - Do not prompt user
    -r - Registration url
    -R - REPOS to use for rancher/server:master build
    -s - Server Container:
            needs full container repo/name[:tag]
    -u - Docker install URL
    -z - Zone [us-central1-f default]
EOF
}

WAIT=true
INSTANCE_COUNT=1
OS_FAMILY=ubuntu-1604-lts
OS_IMAGE_PROJECT=ubuntu-os-cloud
#DOCKER_URL="https://releases.rancher.com/install-docker/1.10.3.sh"
DOCKER_URL="https://get.docker.com"
MASTER_MACHINE_TYPE="g1-small"
NODE_MACHINE_TYPE="g1-small"
ZONE="us-central1-f"
NETWORK="default"
DISK_SIZE=40
DISK_TYPE="pd-standard"   # SSD is "pd-ssd"

while getopts ":a:b:c:de:f:hilm:M:n:o:p:qr:R:s:u:wz:N:" opt;do
    case $opt in
    a)
        AGENT_CONTAINER="${OPTARG}"
        ;;
    b)
        DISK_SIZE=${OPTARG}
        ;;
    c)
        # Add 10acre so that you can't accidentally list/delete lots of hosts easily.
        CLUSTER_NAME="${OPTARG}-10acre"
        MASTER_NAME="${CLUSTER_NAME}-master-0"
        ;;
    d)
        DELETE_NODES_FLAG="true"
        ;;
    e)
        EXTERNAL_IP=${OPTARG}
        ;;
    f)
        DISK_TYPE=${OPTARG}
        ;;
    h)
        print_help
        exit 1
        ;;
    i)
        MASTER_IP_FLAG="true"
        ;;
    l)
        LIST_NODES_FLAG="true"
        ;;
    m)
        MASTER_MACHINE_TYPE=${OPTARG}
        ;;
    M)
        NODE_MACHINE_TYPE=${OPTARG}
        ;;
    N)
        NETWORK=${OPTARG}
        ;;
    n)
        INSTANCE_COUNT=${OPTARG}
        ;;
    o)
        OS_FAMILY=${OPTARG}
        ;;
    p)
        case $OPTARG in
            "server")
                PRIVILEGED_MASTER="true"
                ;;
            "agent")
                PRIVILEGED_AGENT="true"
                ;;
            "all")
                PRIVILEGED_MASTER="true"
                PRIVILEGED_AGENT="true"
                ;;
            * )
                print_help
                exit 1
                ;;
            esac
        ;;
    r)
        REGISTRATION_URL="${OPTARG}"
        ;;
    R)
        REPOS=${OPTARG}
        ;;
    q)
        QUIET="true"
        ;;
    s)
        SERVER_CONTAINER="${OPTARG}"
        ;;
    t)
        echo "-t option deprecated. Use -u https://test.docker.com"
        ;;
    u)
        DOCKER_URL="${OPTARG}"
        ;;
    w)
        echo "-w Deprecated... now default behavior"
        ;;
    \?)
        echo "Invalid arguemnts" >&2
        print_help
        exit 1
        ;;
    z)
        ZONE="${OPTARG}"
        ;;
    :)
        echo "Option -${OPTARG} requires arguement." >&2
        print_help
        exit 1
        ;;
    esac
done
shift $((OPTIND-1))

list_nodes()
{
    local opts

    if [ -n "${CLUSTER_NAME}" ]; then
        opts="--regexp \"${CLUSTER_NAME}.*\""
    fi

    gcloud compute instances list --project ${GCE_PROJECT} --zones ${ZONE} ${opts}
}

delete_nodes()
{
    local opts
    local nodes

    nodes=$(list_nodes | grep -v ^NAME | cut -d' ' -f1)

    # This will prompt the user to confirm.
    if [ ${QUIET} ]; then
        opts="--quiet"
    else
        opts=""
    fi

    gcloud compute instances delete ${opts} --project ${GCE_PROJECT} --zone ${ZONE} ${nodes}
}

get_master_ip()
{
    IP=$(gcloud compute instances describe "${MASTER_NAME}" --project ${GCE_PROJECT} --zone ${ZONE} | grep natIP | cut -d':' -f2)
    echo $IP
}

get_os_project()
{
    local project

    # Has to be a better more dynamic way...that also isn't slow.
    case $OS_FAMILY in
        ubuntu*)
            project="ubuntu-os-cloud"
            ;;
        *-rancher-base)
            project="rancher-dev"
            ;;
        coreos*)
            project="coreos-cloud"
            ;;
        centos-*)
            project="centos-cloud"
            ;;
        rhel-*)
            project="rhel-cloud"
            ;;
        debian-*)
            project="debian-cloud"
            ;;
        fedora-21)
            project="fedora-cloud-base-21-20141217"
            ;;
        *)
            echo "Invalid OS Selection: $OS_FAMILY" 1>&2
            exit 1
            ;;
    esac

    echo "${project}"

}

get_user_data_flag()
{
    case $OS_FAMILY in
        "fedora-21")
            echo "true"
            ;;
        *)
            echo "false"
            ;;
    esac
}

gcloud_create()
{
    # 1 - instance name
    # 2 - startup script path/filename
    # 3 - GCE tags
    # 4 - Master IP Address
    # 5 - Machine Type
    # 6 - Boot disk size (gb)

    local metadata_key=startup-script
    local gcloud_args

    if [ "$(get_user_data_flag)" = "true" ]; then
        metadata_key=user-data
    fi

    gcloud_args="--zone ${ZONE}
        --machine-type ${5}
        --boot-disk-size=${DISK_SIZE}GB
        --boot-disk-type=${DISK_TYPE}
        --network ${NETWORK}
        --project ${GCE_PROJECT}
        --metadata-from-file ${metadata_key}=${2}
        --maintenance-policy MIGRATE
        --scopes https://www.googleapis.com/auth/devstorage.read_only
        --image-project $(get_os_project)
        --image-family ${OS_FAMILY}
        --tags ${3} "

    if [ ! -z ${4} ]; then
        gcloud_args="${gcloud_args} --address ${4}"
    fi

    gcloud compute instances create ${1} \
        $gcloud_args
}

create_reg_tokens() # Signature: rancher_server_ip
{
    project_id=$(curl -s -X GET http://${1}:8080/v2-beta/projects|python -c'import json,sys;print(json.load(sys.stdin)["data"][0]["id"])')
    echo $(curl -s -X POST http://${1}:8080/v2-beta/projects/${project_id}/registrationtokens|python -c'import json,sys; print(json.load(sys.stdin)["links"]["self"])')
}

get_reg_url()
{
    ## This is a bit hacky...
    local reg_tokens_link
    reg_tokens_link=$(create_reg_tokens ${1})
    sleep 1
    echo $(curl -s -X GET $reg_tokens_link|python -c'import json,sys; print(json.load(sys.stdin)["registrationUrl"])')
}

get_run_cmd()
{
    ip=$(get_master_ip)
    reg_tokens_link=$(create_reg_tokens ${ip})
    sleep 1
    echo $(curl -s -X GET $reg_tokens_link|python -c'import json,sys; print(json.load(sys.stdin)["command"])')
}

create_file()
{
    local build_file=${1}
    local docker_run_cmd=${2}
    cat > ${build_file} << EOF
#!/bin/bash

curl -sSL --retry 5 --retry-delay 10 ${DOCKER_URL}| sh
if [ -r /etc/centos-release ] || [ -r /etc/redhat-release ]; then
    yum -y install docker-selinux
fi

if command -v systemctl > /dev/null; then
    echo "Starting docker..."
    systemctl stop docker
    sleep 10
    systemctl start docker
fi

sleep 5
${docker_run_cmd}
EOF
}


generate_build_script() # signature: role container build_file
{
    local container
    local default_container
    local build_file
    local docker_opts
    local docker_cmd
    local repos_value

    case $1 in
        master)
            default_container="rancher/server"

            docker_opts=('"run"', '"-d"', '"-p"', '"8080:8080"', '"-e"', '"DEFAULT_CATTLE_TELEMETRY_OPT=out"', '"-v"', '"/var/run/docker.sock:/var/run/docker.sock"');
            docker_cmd=

            if [[ "${PRIVILEGED_MASTER}" = "true" ]]; then
                docker_opts+=(, '"--privileged"')
            fi

            if [[ "${REPOS}" != "" ]]; then
                repos_value="-e REPOS="\"${REPOS}\"
            fi

            ;;
        worker)
            default_container="rancher/agent:latest"

            IP=$(get_master_ip)
            docker_opts=('"run"', '"-d"', '"-v"', '"/var/run/docker.sock:/var/run/docker.sock"');

            if [[ "${PRIVILEGED_AGENT}" = "true" ]]; then
                docker_opts+=(, '"--privileged"')
            fi

            docker_cmd=${REGISTRATION_URL:="$(get_reg_url ${IP})"}
            ;;
        *)
            echo "Can not generate build script"
            exit 1
            ;;
    esac

    if [ -z ${2} ]; then
        container=${default_container}
    else
        container="${2}"
    fi

    if [[ "${REPOS}" != "" ]]; then
        container="rancher/server:master"
    fi

    build_file=$3

    if [ "$(get_user_data_flag)" = "true" ]; then
        user_data_clusters $(id -un) "$(cat ~/.ssh/id_rsa.pub)" ${build_file} "${container}" "${DOCKER_URL}" "${docker_cmd}" "${docker_opts[@]}"
    else
        docker_run_cmd="docker $(echo ${docker_opts[@]}| sed -e 's/,//g'|sed -e 's/\"//g') ${repos_value} ${container} ${docker_cmd}"
        echo ${docker_run_cmd}
        create_file ${build_file} "${docker_run_cmd}"
    fi

}

build_master()
{
    build_file="/tmp/10acre-master-build.sh"
    generate_build_script "master" "${SERVER_CONTAINER}" ${build_file}
    gcloud_create "${MASTER_NAME}" "${build_file}" "alt-http-server" "${EXTERNAL_IP}" "${MASTER_MACHINE_TYPE}"
}

build_compute()
{
    local instances

    build_file="/tmp/10acre-worker-build.sh"

    offset=$(list_nodes|grep -v '^NAME\|-10acre-master-0'|wc -l)

    for i in $(seq $((${offset} + 1)) $((${offset} + ${INSTANCE_COUNT}))); do
        instances="${CLUSTER_NAME}-${i} ${instances}"
    done

    if [ -n "${AGENT_CONTAINER}" ]; then
        generate_build_script "worker" "${AGENT_CONTAINER}" ${build_file}
    else
        docker_run_cmd="$(echo $(get_run_cmd)|sed 's/^sudo //')"
        create_file ${build_file} "${docker_run_cmd}"
    fi

    gcloud_create "${instances}" "${build_file}" "alt-http-server,open-compute-nodes" "" "${NODE_MACHINE_TYPE}"
}

build_cluster()
{
    if [ -z "${REGISTRATION_URL}" ]; then
        build_master
        if [ "$WAIT" = "true" ]; then
            IP=$(get_master_ip)
            echo -n "Waiting for server to start "
            while sleep 5; do
                if [ "$(curl -s http://${IP}:8080/ping)" = "pong" ]; then
                    echo Success
                    break
                fi
                echo -n "."
            done
        fi
    fi
    if [ "${INSTANCE_COUNT}" -gt "0" ]; then
        build_compute
    fi
}

main()
{
    if [[ "${LIST_NODES_FLAG}" = "true" && -z "${CLUSTER_NAME}" ]]; then
        list_nodes | grep -- '-10acre-master-' | sed -e 's/^\(.*\)\(-10acre-master.*\)$/\1/' | sort -u
    elif [[ "${LIST_NODES_FLAG}" = "true" && "${CLUSTER_NAME}" ]]; then
        list_nodes
    elif [ "${MASTER_IP_FLAG}" = "true" ]; then
        get_master_ip
    elif [[ "${DELETE_NODES_FLAG}" = "true" && -n "${CLUSTER_NAME}" ]]; then
        delete_nodes
    elif [[ -n "${INSTANCE_COUNT}" && -n "${CLUSTER_NAME}" ]]; then
        build_cluster
    else
        echo "Unable to take action" 1>&2
        print_help
        exit 1
    fi
}

main
