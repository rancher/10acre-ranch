#!/bin/bash
set -o xtrace
set -e

which docker >/dev/null 2>&1 || {
  echo "docker command not found." 1>&2
  exit 1
}

which docker-machine-driver-xhyve >/dev/null 2>&1 || {
  echo "docker-machine-driver-xhyve command not found." 1>&2
  exit 1
}

print_help()
{
  cat 1>&2 <<EOF
mac-ranch Usage:
  mac-ranch [opts]
  -c name - Cluster name/Create world if no other action is specified
  -d - Destroy world
  -h - Print this message
  -i - Print IP of server VM
  -l - List hosts
  -r registration_url - Register another "-n" hosts using the given registration url

  -b - Boot2Docker URL or version tag (default: RancherOS Latest)
  -M - Host memory in mb (default: 1024)
  -m - Server memory in mb (default: 2048)
  -n - Number of hosts (default: 2)
  -R - REPOS to use for rancher/server:master build
  -s - Server Container (default: rancher/server:latest)
       needs full container repo/name[:tag]
  -u - Registry mirror URL (default: none)
EOF
}

SERVER_NAME="rs"
DEFAULT_IMAGE="rancher/server:latest"
MASTER_IMAGE="rancher/server:master"
SERVER_IMAGE="${DEFAULT_IMAGE}"
SERVER_MACHINE_SIZE="2048"
SERVER_MACHINE_CPUS="2"
BOOT2DOCKER="https://releases.rancher.com/os/latest/rancheros.iso"
BOOT_ARGS="loglevel=3 user=docker console=ttyS0 console=tty0 noembed nomodeset norestore waitusb=10 base"
HOST_PREFIX="${SERVER_NAME}-host"
HOST_COUNT=2
HOST_MACHINE_SIZE="1024"
MIRROR_URL=""
PULL_IMAGES=("hello-world" "nginx" "busybox" "ubuntu" "rancher/curl" "cloudnautique/hello-world")

while getopts ":b:c:dhilM:m:n:r:R:s:u:" opt;do
  case $opt in
  b)
    if [[ "$OPTARG" == http* ]]; then
      BOOT2DOCKER="${OPTARG}"
    else
      BOOT2DOCKER="https://github.com/boot2docker/boot2docker/releases/download/${OPTARG}/boot2docker.iso"
    fi
    ;;
  c)
    CREATE_FLAG="true"
    SERVER_NAME=${OPTARG}
    HOST_PREFIX="${SERVER_NAME}-host"
    ;;
  d)
    DELETE_FLAG="true"
    ;;
  h)
    print_help
    exit 1
    ;;
  i)
    SHOW_IP_FLAG="true"
    ;;
  l)
    LIST_HOSTS_FLAG="true"
    ;;
  M)
    HOST_MACHINE_SIZE=${OPTARG}
    ;;
  M)
    SERVER_MACHINE_SIZE=${OPTARG}
    ;;
  n)
    HOST_COUNT=${OPTARG}
    ;;
  R)
    REPOS=${OPTARG}
    ;;
  r)
    REGISTRATION_URL="${OPTARG}"
    ;;
  s)
    SERVER_IMAGE="${OPTARG}"
    ;;
  u)
    MIRROR_URL="${OPTARG}"
    ;;
  \?)
    echo "Invalid arguemnts" >&2
    print_help
    exit 1
    ;;
  :)
    echo "Option -${OPTARG} requires arguement." >&2
    print_help
    exit 1
    ;;
  esac
done
shift $((OPTIND-1))

list_hosts()
{
  docker-machine ls | grep "^${HOST_PREFIX}"
}

list_host_names()
{
  (docker-machine ls -q | grep "^${HOST_PREFIX}") || echo -n ""
}

delete_cluster()
{
  local hosts
  local server

  hosts=$(list_host_names)
  server=""

  if docker-machine ip ${SERVER_NAME} >/dev/null 2>&1; then
    server="${SERVER_NAME}"
  fi

  if [[ "${hosts}${server}" ]]; then
    docker-machine rm -y ${hosts} ${server}
  fi
}

get_server_ip()
{
  echo $(docker-machine ip ${SERVER_NAME})
}

create_reg_token()
{
  server_ip=$(get_server_ip)
  project_id=$(curl -s -X GET http://${server_ip}:8080/v2-beta/projects|python -c'import json,sys;print(json.load(sys.stdin)["data"][0]["id"])')
  echo $(curl -s -X POST http://${server_ip}:8080/v2-beta/projects/${project_id}/registrationtokens|python -c'import json,sys; print(json.load(sys.stdin)["links"]["self"])')
}

get_reg_url()
{
  if [ -z $REGISTRATION_URL ]; then
    local reg_tokens_link
    reg_tokens_link=$(create_reg_token)
    # @TODO wait for token to be active properly...
    sleep 2
    echo $(curl -s -X GET $reg_tokens_link|python -c'import json,sys; print(json.load(sys.stdin)["registrationUrl"])')
  else
    echo $REGISTRATION_URL
  fi
}

build_master()
{
  mirror=""
  if [[ "${MIRROR_URL}" ]]; then
    mirror="--engine-registry-mirror=${MIRROR_URL}"
  fi

  repos=""
  if [[ "${REPOS}" ]]; then
    repos="-e REPOS=\"${REPOS}\""
  fi

  image="${SERVER_IMAGE}"
  if [[ "${REPOS}" != "" && "${image}" = "${DEFAULT_IMAGE}" ]]; then
      image="${MASTER_IMAGE}"
  fi

  docker-machine create \
    --driver=xhyve \
    --xhyve-boot2docker-url="${BOOT2DOCKER}" \
    --xhyve-memory-size="${SERVER_MACHINE_SIZE}" \
    --xhyve-cpu-count="${SERVER_MACHINE_CPUS}" \
    --xhyve-boot-cmd="${BOOT_ARGS} host=${name}" \
    ${mirror} ${SERVER_NAME}

  docker-machine ssh ${SERVER_NAME} docker run -d \
    --restart=unless-stopped \
    -p 8080:8080 \
    -p 3306:3306 ${repos} \
    -v /var/run/docker.sock:/var/run/docker.sock \
    --name=rancher-server \
    -e DEFAULT_CATTLE_TELEMETRY_OPT="out" \
    -e DEFAULT_CATTLE_API_HOST="$(get_server_ip):8080" \
    ${image}
}

build_hosts()
{
  local name
  local offset
  local first_offset
  local sequence
  local i

  mirror=""
  if [[ "${MIRROR_URL}" ]]; then
    mirror="--engine-registry-mirror=${MIRROR_URL}"
  fi

  if [ "${HOST_COUNT}" -gt "0" ]; then
    offset=$(list_host_names|wc -l)
    first_offset=$offset
    sequence=$(seq $((${offset} + 1)) $((${offset} + ${HOST_COUNT})))

    for i in $sequence
    do
      name="${HOST_PREFIX}${i}"
      echoerr "Creating ${name}"
      docker-machine create \
        --driver=xhyve \
        --xhyve-boot2docker-url="${BOOT2DOCKER}" \
        --xhyve-memory-size="${HOST_MACHINE_SIZE}" \
        --xhyve-boot-cmd="${BOOT_ARGS} host=${name}" ${mirror} ${name} 1>&2;
    done
  fi

  echo $first_offset
}

register_hosts()
{
  local name
  local offset
  local ip_cmd
  local registration_cmd
  local sequence
  local i
  local j

  offset=$1
  echoerr "Register hosts starting at ${offset}"
  ip_cmd="\$(ifconfig eth0 | grep 'inet ' | awk -F'[: ]+' '{ print \$4 }')"
  registration_cmd="docker run -e CATTLE_AGENT_IP=\"${ip_cmd}\" -d -v /var/run/docker.sock:/var/run/docker.sock rancher/agent $(get_reg_url)"
  sequence=$(seq $((${offset} + 1)) $((${offset} + ${HOST_COUNT})))

  if [ "${HOST_COUNT}" -gt "0" ]; then
    for i in $sequence
    do
      name="${HOST_PREFIX}${i}"
      echoerr "Registering ${name}: ${registration_cmd}"
      docker-machine ssh ${name} ${registration_cmd} 1>&2;
      for j in "${PULL_IMAGES[@]}"
      do
        echoerr "Pulling images for ${name}"
        docker-machine ssh ${name} docker pull "${j}" 1>&2;
      done
    done
  fi
}

wait_for_server()
{
  echo -n "Waiting for server to start "
  server_ip=$(get_server_ip)
  while sleep 5; do
    if [ "$(curl -s http://${server_ip}:8080/ping)" = "pong" ]; then
      echo Success
      break
    fi
    echo -n "."
  done
}

build_cluster()
{
  local offset

  if [ -z "${REGISTRATION_URL}" ]; then
    build_master
  fi

  offset=$(build_hosts)
  wait_for_server
  register_hosts $offset

  server_ip=$(get_server_ip)
  echo "Connect to rancher-server at http://${server_ip}:8080/"
  echo ""
}

main()
{
  if [[ "${LIST_HOSTS_FLAG}" = "true" ]]; then
    list_hosts
  elif [[ "${SHOW_IP_FLAG}" = "true" ]]; then
    get_server_ip
  elif [[ "${DELETE_FLAG}" = "true" ]]; then
    delete_cluster
  elif [[ "${CREATE_FLAG}" = "true" || "${REGISTRATION_URL}" ]]; then
    build_cluster
  else
    echo "Unable to take action" 1>&2
    print_help
    exit 1
  fi
}

echoerr()
{
  printf "%s\n" "$*" >&2;
}

main
